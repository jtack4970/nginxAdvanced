
map $cookie_jsessionid $route_cookie {
    ~.+\.(?P<route>\w+)$ $route;
}

map $request_uri $route_uri {
    ~JSESSIONID=.+\.(?P<route>\w+)$ $route;
}

match health_conditions {
    status 200-399;
    header Content-Type = text/html;
    body !~ “It Works!”;
}


upstream myServers {
    zone http_backend 64k;

    server <server>:8080 route=backend1;
    server <server>:8080 route=backend2;
    server <server>:8080 route=backend3;
    #state /var/lib/nginx/state/http_backend.state;

    #sticky learn create=$upstream_cookie_<name>_cookie lookup=$cookie_<name>_cookie zone=client_sessions:1m;
    sticky route $route_cookie $route_uri;
}

log_format sticky "$request \t Upstream: $upstream_addr \t Custom_cookie: $upstream_cookie_<name>_cookie \t Routing Cookie: $route_cookie \t Route URI: $route_uri \t Session Id/Cookies: $http_cookie";

server {
    listen 80;
    listen [::]:80 default_server ipv6only=on;
    error_log /var/log/nginx/main.error.log info;
    access_log /var/log/nginx/main.access.log combined;
    return 301 https://$host$request_uri;
    status_zone redirect;
}

server {
    listen 443 ssl;
    root /usr/share/nginx/html;
    error_log /var/log/nginx/upstream.error.log info;
    access_log /var/log/nginx/upstream.access.log sticky;

    add_header Strict-Transport-Security max-age=31536000;
    status_zone apac;
    error_page 404 /custom_404.html;
    error_page 500 502 503 504 /custom_50x.html;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers on;
    #ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    location / {
        proxy_pass http://myServers/;
        health_check match=health_conditions fails=3 passes=3;
    }

    location = /custom_404.html {
        internal;
    }

    location = /custom_50x.html {
        internal;
    }

    location /test {
        fastcgi_pass unix:/null/path;
    }
}